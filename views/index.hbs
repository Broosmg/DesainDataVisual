<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/leaflet.min.css">
  <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.min.css">
  <title>{{ title }}</title>
  <style>
    * {
      outline: none;
      box-shadow: none !important;
    }
    #outbreakCategories > div > div:hover {
      background-color: #f8f9fa;
    }
    .leaflet-control-zoom {
      display: none;
    }
    .index-top, .ui-menu {
      z-index: 500;
    }
    .btn-light, .card {
      background-color: rgba(255, 255, 255, 0.6);
      backdrop-filter: blur(10px);
    }
    .btn-light:hover {
      background-color: rgba(255, 255, 255, 0.8);
      backdrop-filter: blur(10px);
    }
    article input {
      position: absolute;
      width: 100%;
      height: 102px;
      opacity: 0;
      cursor: pointer;
    }
    input[type=checkbox]:checked ~ div, input:focus {
      --bs-border-opacity: 1;
      border-color: rgba(var(--bs-primary-rgb), var(--bs-border-opacity)) !important;
    }
    .circle {
      width: 25px;
      height: 25px;
    }
  </style>
</head>
<body>
    <div class="card py-4 px-5 position-fixed shadow index-top rounded-4 border-0" style="width: 450px; top: 20px; bottom: 20px; left: 20px;">
      <h2 class="text-secondary-emphasis">{{ title }}</h2>

      <div class="container mt-4 overflow-y-auto">
        <div class="row mb-4 g-2" id="outbreakCategories"></div>

        <div>
          <hr>
          <input type="search" class="form-control mt-4 rounded-4" id="city" placeholder="Cari kota...">
          <div class="m-2 overflow-y-auto" id="cities" style="max-height: 300px;"></div>
        </div>

        <div class="d-none" id="districtPanel">
          <hr>
          <input type="search" class="form-control mt-4 rounded-4" id="district" placeholder="Cari kecamatan...">
          <div class="m-2 overflow-y-auto" id="districts" style="max-height: 300px;"></div>
        </div>
      </div>
    </div>

    <button type="button" class="btn btn-light rounded-circle position-fixed shadow index-top" id="informationButton" data-bs-toggle="tooltip" title="Informasi" style="top: 20px; right: 20px;">
      <i class="fa-solid fa-circle-info"></i>
    </button>

    <div class="card position-fixed shadow index-top invisible border-0" id="informationCard" style="top: 20px; right: 20px; width: 300px;">
      <div class="card-header">
        Informasi
        <button type="button" class="btn-close float-end" id="closeInformationCard"></button>
      </div>

      <div class="card-body" id="cardBody"></div>
    </div>

    <button type="button" class="btn btn-light rounded-circle position-fixed shadow index-top" id="myLoction" data-bs-toggle="tooltip" title="Lokasi saya" style="bottom: 20px; right: 20px;">
      <i class="fa-solid fa-location-dot"></i>
    </button>

    <div class="col" id="map" style="height: 100vh;"></div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe" crossorigin="anonymous"></script>
  <script src="https://code.jquery.com/jquery-3.6.4.min.js" integrity="sha256-oP6HI9z1XaZNBrJURtCoUT5SUnxFr8s3BzRl+cbzUq8=" crossorigin="anonymous"></script>
  <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/leaflet.min.js"></script>
  <script>
    $(document).ready(function() {
      const map = L.map('map').setView([-6.200000, 106.816666], 13);
      let internalData = {
        provinceId: 31,
        cityId: [],
        districtId: [],
        outbreakCategoryId: [],
        outbreaks: [],
        outbreakCategories: []
      };

      outbreakCategories();
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' +
          '<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
          'Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
        maxZoom: 18
      }).addTo(map);

      $('#informationButton').click(function () {
        $('#informationCard').removeClass('invisible');
        $('#informationButton').addClass('invisible');
      });

      $('#closeInformationCard').click(function () {
        $('#informationCard').addClass('invisible');
        $('#informationButton').removeClass('invisible');
      });

      $('#myLoction').click(function () {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function (value) {
            const coords = value.coords;

            map.setView([coords.latitude, coords.latitude], 15);
          });
        }
      });

      function outbreakCategories() {
        const query = `query {
          outbreakCategories {
            id
            name
          }
        }`;
        $.ajax({
          url: '/graphql',
          method: 'POST',
          contentType: 'application/json',
          data: JSON.stringify({ query: query }),
          success: function (data) {
            internalData.outbreakCategories = data.data.outbreakCategories;

            generatePin();

            for (const iterator of internalData.outbreakCategories) {
              const element = $(`<div class="col">
                <article>
                  <input type="checkbox" id="category" data-id="${iterator.id}" value="${iterator.id}">
                  <div class="rounded-4 border">
                    <div class="card-body text-center">
                      <small>${iterator.name}</small>
                    </div>
                  </div>
                </article>
              </div>`);

              $("#outbreakCategories").append(element);
              addClick(element);
            }
          }
        });
      }

      function addClick(element) {
        $(element).click(function () {
          const id = $(element).find('input').attr('value');

          if (internalData.outbreakCategoryId.filter(value => value == id).length) {
            internalData.outbreakCategoryId = internalData.outbreakCategoryId.filter(value => value != id);
          } else {
            internalData.outbreakCategoryId.push(id);
          }

          generatePin();
        });
      }

      $('#city').autocomplete({
        source: function (request, response) {
          const query = `query {
            cities(query: "${$("#city").val()}", provinceId: "31") {
              id
              name
            }
          }`;
          $.ajax({
            url: '/graphql',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ query: query }),
            success: function (data) {
              const temp = [];

              for (const iterator of data.data.cities) {
                if (internalData.cityId.filter(value => value == iterator.id).length) {
                  continue;
                }

                temp.push(iterator);
              }

              response(changeKeyName(temp.length ? temp : data.data.cities, 'name', 'label'));
            }
          });
        },
        select: function(event, ui) {
          const item = ui.item;
          const id = item.id;
          const element = $(`<div class="alert alert-primary alert-dismissible fade show my-3 rounded-4" role="alert" data-id="${id}">
            <small>${item.label}</small>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
          </div>`);

          internalData.cityId.push(id);
          $("#city").val("");
          $("#cities").append(element);
          $("#districtPanel").removeClass("d-none");
          $(element).click(function () {
            internalData.cityId = internalData.cityId.filter(value => value != $(this).attr('data-id'));

            if (!internalData.cityId.length) {
              internalData.districtId = [];

              $("#districtPanel").addClass("d-none");
              generatePin();
            }
          });
          return false;
        }
      });

      $("#district").autocomplete({
        source: function (request, response) {
          const query = `query {
            districts(query: "${$("#district").val()}", cityId: "${internalData.cityId.join(',')}") {
              id
              name
            }
          }`;
          $.ajax({
            url: '/graphql',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ query: query }),
            success: function (data) {
              const temp = [];

              for (const iterator of data.data.districts) {
                if (internalData.districtId.filter(value => value == iterator.id).length) {
                  continue;
                }

                temp.push(iterator);
              }

              response(changeKeyName(temp.length ? temp : data.data.districts, 'name', 'label'));
            }
          });
        },
        select: function(event, ui) {
          const item = ui.item;
          const id = item.id;
          const element = $(`<div class="alert alert-primary alert-dismissible fade show my-3 rounded-4" role="alert" data-id="${id}">
            <small>${item.label}</small>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
          </div>`);

          internalData.districtId.push(id);
          $("#district").val("");
          $("#districts").append(element);
          generatePin();
          $(element).click(function () {
            internalData.districtId = internalData.districtId.filter(value => value != $(this).attr('data-id'));

            generatePin();
          });
          return false;
        }
      });

      function generatePin() {
        const query = `query {
          outbreaks(districtId: "${internalData.districtId.join(',')}", outbreakCategoryId: "${internalData.outbreakCategoryId.join(',')}") {
            latitude
            longitude
            radius
            outbreakCategory {
              id
              name
            }
            district {
              name
            }
          }
        }`;
        $.ajax({
          url: '/graphql',
          method: 'POST',
          contentType: 'application/json',
          data: JSON.stringify({ query: query }),
          success: function (data) {
            internalData.outbreaks = data.data.outbreaks;
            let element = '';

            map.eachLayer(function (layer) {
              if (layer instanceof L.Circle) {
                map.removeLayer(layer);
              }
            });

            for (const iterator of internalData.outbreaks) {
              L.circle([iterator.latitude, iterator.longitude], {
                radius: iterator.radius * 100,
                fillColor: iterator.outbreakLevel.indicatorColor,
                color: iterator.outbreakLevel.indicatorColor,
                weight: 0
              }).addTo(map);
            }

            for (const iterator of internalData.outbreakCategories) {
              const data = internalData.outbreaks.filter(value => value.outbreakCategory.id == iterator.id);

              element += `<h5 class="card-title">${iterator1.name}</h5>`;
              element += `<p class="card-text">Penderita: ${data.map(value => value.sufferer).reduce((previousValue, currentValue) => previousValue + currentValue)} orang</p>`;
              element += `<p class="card-text">Meninggal: ${data.map(value => value.dead).reduce((previousValue, currentValue) => previousValue + currentValue)} orang</p>`;
            }

            $('#cardBody').html(element);
          }
        });
      }
    });

    function changeKeyName(array, oldKeyName, newKeyName) {
      return array.map(obj => {
        if (obj.hasOwnProperty(oldKeyName)) {
          obj[newKeyName] = obj[oldKeyName];

          delete obj[oldKeyName];
        }

        return obj;
      });
    }

    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
      return new bootstrap.Tooltip(tooltipTriggerEl);
    });
  </script>
</body>
</html>